Important! 27 and 283 are similar problems (please revise by doing without seeing these)
PS: Also, 905. Sort Array By Parity is similar and very easy once you do the above two problems (same pattern)

27. Remove element 'val' from an array nums. modify in place and return the length k that is the size of the new array.
we dont care about the elements beyond this length (so you could leave existing values as-is)

class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        
        k = 0
        for i in range(len(nums)):
            if nums[i] != val:
                nums[k] =nums[i]
                k += 1
                
        return k
        
 283. Move Zeroes (*very similar to above)
 Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Input: nums = [0]
Output: [0]

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        
        #https://leetcode.com/problems/move-zeroes/discuss/979820/Two-Pointeror-Visual-or-Python
        
        #Two pointer approach - both indexes start at zero.
  
        k = 0
        
        for i in range(len(nums)):
            if nums[i] != 0:
                nums[k], nums[i] = nums[i], nums[k]
                k += 1
        
        
  905. Sort Array By Parity
 
 
        
        
 
   
  26. Remove Duplicates from Sorted Array
  
  ** I did this on my OWN!!! :) (Wednesday, May 11th, 2022)
  
  class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:
        #[1,1,2]
        #output = [1, 2]
      
        k = 1
        for i in range(1,len(nums)):
            if nums[i] != nums[i-1]:
                nums[k] = nums[i]
                k += 1
        
        return k
                
            
