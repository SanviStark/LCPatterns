1337. The K Weakest Rows in a Matrix 

Time complexity: O(m . (n + log(m)))

--> first we are iterating through matrix to calculate sum of 1's --> O(m . n)
--> Second, we are sorting the strengths (which is an array of length m) --> O(m log n)

adding these two --> O(m . n ) + O(m log n) 
                   = O(m(n + log n))

https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/

You are given an m x n binary matrix mat of 1's (representing soldiers) and 0's (representing civilians). The soldiers are positioned in front of the civilians. That is, all the 1's will appear to the left of all the 0's in each row.

A row i is weaker than a row j if one of the following is true:

The number of soldiers in row i is less than the number of soldiers in row j.
Both rows have the same number of soldiers and i < j.
Return the indices of the k weakest rows in the matrix ordered from weakest to strongest.

class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        
        m = len(mat)
        n = len(mat[0])
        
        strengths =[(sum(row), i) for i, row in enumerate(mat)]
        
        strengths.sort()
        
        return [index for strength, index in strengths[:k]]
        
  ***solution without list comprehensions:
  
  def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:

    # Note that there is a more conscise solution just below. This code
    # avoids the use of advanced language features.

    m = len(mat)
    n = len(mat[0])

    # Calculate the strength of each row.
    strengths = []
    for i, row in enumerate(mat):
        strength = 0
        for j in range(n):
            if row[j] == 0: break
            strength += 1
        strengths.append((strength, i))

    # Sort all the strengths. This will sort firstly by strength
    # and secondly by index.
    strengths.sort()

    # Pull out and return the indexes of the smallest k entries.
    indexes = []
    for i in range(k):
        indexes.append(strengths[i][1])
    return indexes
